% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bruteForce.R, R/dynamic.R, R/greedy.R
\name{generator}
\alias{generator}
\title{Brute force knapsack}
\usage{
generator()

generator()

generator()
}
\arguments{
\item{parallel}{It determines whether parallel computation is used and it is logical.}

\item{x}{A data frame with two columns, 'v' for values and 'w' for weights.}

\item{W}{The capacity of the knapsack.}
}
\value{
list It contains the maximum value and the elements selected to maximize the knapsack value.

A list with the maximum value and a vector of selected item indices.

A list with the maximum value and a vector of selected item indices.
}
\description{
This function implements the brute force knapsack.

This function solves the 0/1 knapsack problem using dynamic programming.

This function solves the knapsack problem using a greedy approach.
}
\examples{
#Create sample data
set.seed(42)
n <- 2000
knapsack_objects <- data.frame(w = sample(1:4000, size = n, replace = TRUE),
                              v = runif(n, min = 0, max = 10000))

# Run the brute force knapsack algorithm
result <- brute_force_knapsack(x = knapsack_objects[1:8, ], W = 3500)



n <- 2000
knapsack_objects <- data.frame(
w = sample(1:4000, size = n, replace = TRUE),
v = run if(n = n, 0, 10000)
)
result <- knapsack_dynamic(x = knapsack_objects[1:8, ], W = 3500)
print(result)

n <- 2000
knapsack_objects <- data.frame(
w = sample(1:4000, size = n, replace = TRUE),
v = run if(n = n, 0, 10000)
)
result <- greedy_knapsack(x = knapsack_objects[1:8, ], W = 3500)
print(result)

}
